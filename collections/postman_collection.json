{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "get": {
        "operationId": "UsersController_getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users returned"
          }
        },
        "summary": "Get all users",
        "tags": [
          "users"
        ]
      }
    },
    "/create-user": {
      "post": {
        "operationId": "UsersController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          }
        },
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/update-user/{id}": {
      "put": {
        "operationId": "UsersController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "No field changed"
          }
        },
        "summary": "Update an existing user",
        "tags": [
          "users"
        ]
      }
    },
    "/delete-user/{id}": {
      "delete": {
        "operationId": "UsersController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the user to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          }
        },
        "summary": "Delete a user",
        "tags": [
          "users"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "NodeJS Backend API",
    "description": "Swagger OpenAPI documentation for nodejs-backend",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "API",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "example": "Doe",
            "description": "Last name of the user"
          },
          "dob": {
            "type": "string",
            "example": "01-01-2000",
            "description": "Date of birth (dd-mm-yyyy)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "do not wish to specify"
            ],
            "example": "male"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "dob",
          "gender"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "example": "Doe",
            "description": "Last name of the user"
          },
          "dob": {
            "type": "string",
            "example": "01-01-2000",
            "description": "Date of birth (dd-mm-yyyy)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "do not wish to specify"
            ],
            "example": "male"
          },
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "User UUID"
          }
        },
        "required": [
          "id"
        ]
      }
    }
  }
}