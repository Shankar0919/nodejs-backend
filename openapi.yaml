openapi: 3.0.0
paths:
  /healthcheck:
    get:
      operationId: ApiController_healthcheck
      parameters: []
      responses:
        "200":
          description: Service is healthy
      summary: Check API health
      tags:
        - healthcheck
  /users:
    get:
      operationId: UsersController_getUsers
      parameters: []
      responses:
        "200":
          description: List of users returned
      summary: Get all users
      tags: &a1
        - users
  /create-user:
    post:
      operationId: UsersController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: User created successfully
      summary: Create a new user
      tags: *a1
  /update-user/{id}:
    put:
      operationId: UsersController_updateUser
      parameters:
        - name: id
          required: true
          in: path
          description: UUID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: User updated successfully
        "400":
          description: No field changed
      summary: Update an existing user
      tags: *a1
  /delete-user/{id}:
    delete:
      operationId: UsersController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: UUID of the user to delete
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
      summary: Delete a user
      tags: *a1
info:
  title: User API
  description: API for managing users and healthcheck
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        firstname:
          type: string
          example: John
          description: First name of the user
        lastname:
          type: string
          example: Doe
          description: Last name of the user
        dob:
          type: string
          example: 01-01-2000
          description: Date of birth (dd-mm-yyyy)
        gender:
          type: string
          enum: &a2
            - male
            - female
            - do not wish to specify
          example: male
      required:
        - firstname
        - lastname
        - dob
        - gender
    UpdateUserDto:
      type: object
      properties:
        firstname:
          type: string
          example: John
          description: First name of the user
        lastname:
          type: string
          example: Doe
          description: Last name of the user
        dob:
          type: string
          example: 01-01-2000
          description: Date of birth (dd-mm-yyyy)
        gender:
          type: string
          enum: *a2
          example: male
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: User UUID
      required:
        - id
